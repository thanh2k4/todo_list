name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: '0'
          MYSQL_DATABASE: todo_list
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'adopt'

    - name: Build and test backend
      run: |
        cd todo-backend
        mvn clean install
        mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/todo_list?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: '0'

    - name: Cache Node.js modules
      uses: actions/cache@v4
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/todo-frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Build and test frontend
      run: |
        cd todo-frontend
        npm install
        npm run build
        npm test

  
  deploy-docker:
      needs: build-and-test
      runs-on: ubuntu-latest
      steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine current environment
        run: |
          CURRENT_ENV=$([ -f current_env.txt ] && cat current_env.txt || echo "blue")
          NEXT_ENV=$([[ $CURRENT_ENV == "blue" ]] && echo "green" || echo "blue")
          echo "CURRENT_ENV=$CURRENT_ENV" >> $GITHUB_ENV
          echo "NEXT_ENV=$NEXT_ENV" >> $GITHUB_ENV

      - name: Build and push Docker images
        run: |
          docker-compose -f docker-compose.${NEXT_ENV}.yml build
          docker-compose -f docker-compose.${NEXT_ENV}.yml push

      - name: Deploy the next environment
        run: |
          docker-compose -f docker-compose.${NEXT_ENV}.yml up -d
          if [ $? -eq 0 ]; then
            echo "Deployment of $NEXT_ENV was successful."
            echo "$NEXT_ENV" > current_env.txt
          else
            echo "Deployment failed. Keeping the current environment as $CURRENT_ENV."
            echo "$CURRENT_ENV" > current_env.txt
          fi

      - name: Upload environment artifact
        uses: actions/upload-artifact@v3
        with:
          name: current-env
          path: current_env.txt

  post-deploy:
    needs: deploy-docker
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download current environment artifact
      uses: actions/download-artifact@v3
      with:
        name: current-env

    - name: Read current environment and perform health check
      run: |
        CURRENT_ENV=$(cat current_env.txt)
        echo "Current environment is: $CURRENT_ENV"
        echo "CURRENT_ENV=$CURRENT_ENV" >> $GITHUB_ENV

    - name: Clean up old environment
      run: |
        OLD_ENV=$([[ $CURRENT_ENV == "blue" ]] && echo "green" || echo "blue")
        docker-compose -f docker-compose.${OLD_ENV}.yml down