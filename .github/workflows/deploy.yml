name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: '0'
          MYSQL_DATABASE: todo_list
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Build and test backend
      run: |
        cd todo-backend
        mvn clean install
        mvn test
      env:
        SPRING_DATASOURCE_URL: jdbc:mysql://localhost:3306/todo_list?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
        SPRING_DATASOURCE_USERNAME: root
        SPRING_DATASOURCE_PASSWORD: '0'

    - name: Build and test frontend
      run: |
        cd todo-frontend
        npm install
        npm run build
        npm test

  deploy-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Determine current and next environment
      run: |
        CURRENT_ENV=$(echo "blue")
        if [ -f env.state ]; then
          CURRENT_ENV=$(cat env.state)
        fi
        NEXT_ENV=$([[ $CURRENT_ENV == "blue" ]] && echo "green" || echo "blue")
        echo "CURRENT_ENV=$CURRENT_ENV" >> $GITHUB_ENV
        echo "NEXT_ENV=$NEXT_ENV" >> $GITHUB_ENV

    - name: Deploy the new environment
      run: |
        docker-compose -f docker-compose.${NEXT_ENV}.yml up -d

    - name: Save artifact for current environment
      run: echo "$NEXT_ENV" > current_env.txt

    - name: Upload current environment artifact
      uses: actions/upload-artifact@v3
      with:
        name: current-env
        path: current_env.txt

    - name: Cleanup old environment
      run: |
        docker-compose -f docker-compose.${CURRENT_ENV}.yml down
